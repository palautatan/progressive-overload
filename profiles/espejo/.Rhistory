geom_tile(color = 'black') +
theme(legend.title=element_text(color = '#000000', size = 10)) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title=element_text(color = 'black', size = 10)) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title=element_text(color = 'black', size = 10)) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title=element_text(color = 'black', size = 10)) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title=element_text(color = "blue", size = 10)) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title=element_text(color = "blue", size = 10))
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title=element_text(color = "blue", size = 10)) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title = element_text(color = "blue", size = 10)) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title = element_text(color = "blue")) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
theme(legend.title = element_text() +
theme(legend.title = element_text()_ +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title = element_text()) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title = element_text()) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
labs(fill='Hi')
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
theme(legend.title = element_text()) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B'))
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') + theme(legend.title = element_text(color = "blue", size = 10),
legend.text = element_text(color = "red")) +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B'))
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') + theme(legend.title = element_text(color = "blue", size = 10),
legend.text = element_text(color = "red")) +
#   scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B'))
#
# # Change the appearance of legend title and text labels
# p
get_time <- function(k) {
k %>%
summarize(start=tail(time, 1),
end=head(time, 1)) %>%
summarize(mins=difftime(end, start, units='mins')) %>%
as.numeric()
}
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') + theme(legend.title = element_text(color = "blue", size = 10),
legend.text = element_text(color = "red"))
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B'))
ggcal
ggcal <- function (dates, fills)
{
months <- format(seq(as.Date("2016-01-01"), as.Date("2016-12-01"),
by = "1 month"), "%B")
mindate <- as.Date(format(min(dates), "%Y-%m-01"))
maxdate <- (seq(as.Date(format(max(dates), "%Y-%m-01")),
length.out = 2, by = "1 month") - 1)[2]
filler <- tibble(date = seq(mindate, maxdate, by = "1 day"))
t1 <- tibble(date = dates, fill = fills) %>% right_join(filler,
by = "date") %>% mutate(dow = as.numeric(format(date,
"%w"))) %>% mutate(month = format(date, "%B")) %>% mutate(woy = as.numeric(format(date,
"%U"))) %>% mutate(year = as.numeric(format(date, "%Y"))) %>%
mutate(month = factor(month, levels = months, ordered = TRUE)) %>%
arrange(year, month) %>% mutate(monlabel = month)
if (length(unique(t1$year)) > 1) {
t1$monlabel <- paste(t1$month, t1$year)
}
t2 <- t1 %>% mutate(monlabel = factor(monlabel, ordered = TRUE)) %>%
mutate(monlabel = fct_inorder(monlabel)) %>% mutate(monthweek = woy -
min(woy), y = max(monthweek) - monthweek + 1)
weekdays <- c("S", "M", "T", "W", "T", "F", "S")
ggplot(t2, aes(dow, y, fill = fill)) + geom_tile(color = "gray80") +
facet_wrap(~monlabel, ncol = 3, scales = "free") + scale_x_continuous(expand = c(0,
0), position = "top", breaks = seq(0, 6), labels = weekdays) +
scale_y_continuous(expand = c(0, 0)) + theme(panel.background = element_rect(fill = NA,
color = NA), strip.background = element_rect(fill = NA,
color = NA), strip.text.x = element_text(hjust = 0, face = "bold"),
axis.ticks = element_blank(),
axis.title = element_blank(), axis.text.y = element_blank(),
strip.placement = "outsite")
}
ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B'))
library(ggplot2)
library(dplyr)
library(ggcal)
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B'))
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='Hi', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(legend.title=element_text())
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(legend.title=element_text())
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(legend.title=element_text())
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(plot.title=element_text(), legend.title=element_text())
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(plot.title=element_text(size=10), legend.title=element_text())
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(plot.title=element_text(size=15), legend.title=element_text())
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(plot.title=element_text(size=30), legend.title=element_text())
ggcal
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(legend.title=element_text())
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(legend.title=element_text(size=8))
shiny::runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
dates <- lapply(workout_info, function(k) {
k %>%
filter(exercise == 'session start') %>%
pull(date)
})
dates
dates[[1]]
lubridate::days_in_month(dates[[1]])
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
ggcal::ggcal(dates=try4$date, fills=try4$time) +
geom_tile(color = 'black') +
scale_fill_gradientn(name='session time', colours=c('goldenrod', '#EDCB62', '#483D8B', '#473C8B')) +
theme(legend.title=element_text(size=8))
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
?merge
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
?checkboxGroupInput
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
?radioButtons
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
# workouts <- list.files(paste0('profiles/', last_name), full.names=TRUE)
workouts <- list.files()
workouts <- sort(workouts, decreasing=TRUE)
number_of_workouts <- length(workouts)
workout_info <- lapply(workouts, readr::read_csv)
# FOR EACH WORKOUT
this_workout <- workout_info[[1]]
this_workout
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise, equipment) %>%
summarize(`Max Total Weight (lbs)`=max(weight))
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
# workouts <- list.files(paste0('profiles/', last_name), full.names=TRUE)
workouts <- list.files()
workouts <- sort(workouts, decreasing=TRUE)
number_of_workouts <- length(workouts)
workout_info <- lapply(workouts, readr::read_csv)
# FOR EACH WORKOUT
this_workout <- workout_info[[1]]
all_history <- do.call(rbind, workout_info)
workout_info
all_history <- do.call(merge, workout_info)
workout_info
lapply(workout_info, ncol)
all_history
workout_info
workout_info[[1]]
dplyr::left_join(workout_info[[1]], workout_info)
dplyr::left_join(workout_info[[1]], workout_info[[2]])
join_all(workout_info, type='left')
library(plyr)
join_all(workout_info, type='left')
mytest <- plyr::join_all(workout_info, type='left')
dim(mytest)
ncol(mytest)
runApp('~/GitHub/progressive-overload/overload-app')
prs <- all_history %>%
arrange(-as.numeric(date), exercise) %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
slice(which.max(weight)) %>%
select(date, exercise, equipment, weight, repetitions) %>%
arrange(-weight)
all_history <- plyr::join_all(workout_info, type='left')
prs <- all_history %>%
arrange(-as.numeric(date), exercise) %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
slice(which.max(weight)) %>%
select(date, exercise, equipment, weight, repetitions) %>%
arrange(-weight)
prs
# FOR EACH WORKOUT
this_workout <- workout_info[[1]]
this_workout
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise, equipment) %>%
summarize(`Max Total Weight (lbs)`=max(weight))
this_workout
this_workout %>%
filter(exercise != 'session start') %>%
ggplot(aes(x=exercise)) +
geom_bar() +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Sets Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions)) %>%
ggplot(aes(x=exercise, y=mean_rep)) +
geom_bar(stat='identity') +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Reps Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
this_workout
this_workout %>%
filter(exercise != 'session start')
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions))
this_workout
this_workout[[1]] %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions)) %>%
ggplot(aes(x=exercise, y=mean_rep)) +
geom_bar(stat='identity') +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Reps Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions)) %>%
ggplot(aes(x=exercise, y=mean_rep)) +
geom_bar(stat='identity') +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Reps Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
data.frame(this_workout)
class(this_workout)
dim(this_workout)
names(this_workout)
this_workout %>%
filter(exercise != 'session start') %>%
ggplot(aes(x=exercise)) +
geom_bar() +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Sets Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions)) %>%
ggplot(aes(x=exercise, y=mean_rep)) +
geom_bar(stat='identity') +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Reps Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions))
this_workout
names(this_workout)
this_workout$exercise
this_workout %>%
filter(exercise != 'session start') %>%
ungroup %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions)) %>%
ggplot(aes(x=exercise, y=mean_rep)) +
geom_bar(stat='identity') +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Reps Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
this_workout %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
summarize(mean_rep=mean(repetitions)) %>%
ggplot(aes(x=exercise, y=mean_rep)) +
geom_bar(stat='identity') +
ylab('sets') +
xlab('exercise') +
ggtitle('Number of Reps Per Exercise') +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
detach("package:plyr", unload = TRUE)
runApp('~/GitHub/progressive-overload/overload-app')
all_history <- plyr::join_all(workout_info, type='left')
# workouts <- list.files(paste0('profiles/', last_name), full.names=TRUE)
workouts <- list.files()
workouts <- sort(workouts, decreasing=TRUE)
number_of_workouts <- length(workouts)
workout_info <- lapply(workouts, readr::read_csv)
all_history <- plyr::join_all(workout_info, type='left')
prs <- all_history %>%
arrange(-as.numeric(date), exercise) %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
slice(which.max(weight)) %>%
select(date, exercise, equipment, weight, repetitions) %>%
arrange(-weight)
prs
all_history
nrow(all_history)
all_history$date %>% unique()
workout_info
all_history <- plyr::join_all(workout_info, type='full')
all_history
prs <- all_history %>%
arrange(-as.numeric(date), exercise) %>%
filter(exercise != 'session start') %>%
group_by(exercise) %>%
slice(which.max(weight)) %>%
select(date, exercise, equipment, weight, repetitions) %>%
arrange(-weight)
prs
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='palautatan', token='0B5693D36BA720DD21C6A088C161A153', secret='RGbw38Qq5TJSlqJygwKqLe4hNFDWJGt0MKTygHfF')
library(rsconnect)
rsconnect::deployApp('../espejo/../../overload-app/')
library(rsconnect)
rsconnect::deployApp('../espejo/../../overload-app/')
rsconnect::showLogs()
shiny::runApp('~/GitHub/progressive-overload/overload-app')
library(rsconnect)
rsconnect::deployApp('../espejo/../../overload-app/')
runApp('~/GitHub/progressive-overload/overload-app')
runApp()
runApp('~/GitHub/progressive-overload/overload-app')
library(rsconnect)
rsconnect::deployApp('../espejo/../../overload-app/')
library(rsconnect)
rsconnect::deployApp('../espejo/../../overload-app/')
runApp('~/GitHub/progressive-overload/overload-app')
rsconnect::deployApp('../espejo/../../overload-app/')
library(rsconnect)
rsconnect::deployApp('../espejo/../../overload-app/')
library(rsconnect)
rsconnect::deployApp(appDir='../../overload-app/',
forceUpdate=TRUE)
rsconnect::deployApp(appDir='../../overload-app/',
forceUpdate=TRUE)
google_trends <- readr::read_csv('multiTimeline.csv')
google_trends
google_trends <- readr::read_csv('multiTimeline.csv', skip=2)
google_trends
google_trends <- google_trends %>% reshape2::melt()
google_trends <- google_trends %>% reshape2::melt(id.vars='Week')
google_trends <- readr::read_csv('multiTimeline.csv', skip=2)
google_trends <- google_trends %>% reshape2::melt(id.vars='Week')
google_trends
google_trends %>%
ggplot2::ggplot(aes(x=Week, y=value, group=variable)) +
geom_point() +
geom_line()
google_trends %>%
ggplot2::ggplot(aes(x=Week, y=value, group=variable)) +
geom_point(aes(col=variable)) +
geom_line()
google_trends
google_trends <- readr::read_csv('multiTimeline.csv', skip=2)
google_trends
google_trends <- readr::read_csv('multiTimeline.csv', skip=2)
names(google_trends)[2:4] <- c('diet', 'exercise', 'pill')
google_trends <- google_trends %>% reshape2::melt(id.vars='Week')
google_trends %>%
ggplot2::ggplot(aes(x=Week, y=value, group=variable)) +
geom_point(aes(col=variable)) +
geom_line()
google_trends %>%
ggplot2::ggplot(aes(x=Week, y=value, group=variable)) +
geom_point(aes(col=variable)) +
geom_line() +
theme_minimal()
google_trends %>%
ggplot2::ggplot(aes(x=Week, y=value, group=variable)) +
geom_point(aes(col=variable)) +
geom_line() +
ylab('standardized search value') +
ggtitle('Search Trends "for Weight Loss"') +
theme_minimal()
google_trends <- readr::read_csv('multiTimeline.csv', skip=2)
names(google_trends)[2:4] <- c('diet', 'exercise', 'pill')
google_trends <- google_trends %>% reshape2::melt(id.vars='Week')
google_trends %>%
ggplot2::ggplot(aes(x=Week, y=value, group=variable)) +
geom_point(aes(col=variable)) +
geom_line() +
ylab('standardized search value') +
ggtitle('Search Trends "for Weight Loss"') +
theme_minimal() +
scale_color_manual(values=c('sienna2', 'slateblue', 'goldenrod2')) +
google_trends %>%
ggplot2::ggplot(aes(x=Week, y=value, group=variable)) +
geom_point(aes(col=variable)) +
geom_line() +
ylab('standardized search value') +
ggtitle('Search Trends "for Weight Loss"') +
theme_minimal() +
scale_color_manual(values=c('sienna2', 'slateblue', 'goldenrod2'))
knitr::include_graphics('weight-loss.png')
knitr::include_graphics('overload-ss.png')
rsconnect::deployApp(appDir='../../overload-app/',
forceUpdate=TRUE)
rsconnect::deployApp(appDir='../../overload-app/',
forceUpdate=TRUE)
knitr::include_graphics('overload-ss-2.png')
knitr::include_graphics('overload-ss-3.png')
